package com.desktop.telephone.telephonedesktop.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.desktop.telephone.telephonedesktop.bean.DesktopIconBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DESKTOP_ICON_BEAN".
*/
public class DesktopIconBeanDao extends AbstractDao<DesktopIconBean, Long> {

    public static final String TABLENAME = "DESKTOP_ICON_BEAN";

    /**
     * Properties of entity DesktopIconBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Mid = new Property(1, int.class, "mid", false, "MID");
        public final static Property Img_normal = new Property(2, int.class, "img_normal", false, "IMG_NORMAL");
        public final static Property Img_pressed = new Property(3, int.class, "img_pressed", false, "IMG_PRESSED");
        public final static Property OrderId = new Property(4, int.class, "orderId", false, "ORDER_ID");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property IconType = new Property(6, int.class, "iconType", false, "ICON_TYPE");
        public final static Property App_icon = new Property(7, byte[].class, "app_icon", false, "APP_ICON");
    }


    public DesktopIconBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DesktopIconBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DESKTOP_ICON_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MID\" INTEGER NOT NULL ," + // 1: mid
                "\"IMG_NORMAL\" INTEGER NOT NULL ," + // 2: img_normal
                "\"IMG_PRESSED\" INTEGER NOT NULL ," + // 3: img_pressed
                "\"ORDER_ID\" INTEGER NOT NULL ," + // 4: orderId
                "\"TITLE\" TEXT," + // 5: title
                "\"ICON_TYPE\" INTEGER NOT NULL ," + // 6: iconType
                "\"APP_ICON\" BLOB);"); // 7: app_icon
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DESKTOP_ICON_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DesktopIconBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMid());
        stmt.bindLong(3, entity.getImg_normal());
        stmt.bindLong(4, entity.getImg_pressed());
        stmt.bindLong(5, entity.getOrderId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
        stmt.bindLong(7, entity.getIconType());
 
        byte[] app_icon = entity.getApp_icon();
        if (app_icon != null) {
            stmt.bindBlob(8, app_icon);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DesktopIconBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMid());
        stmt.bindLong(3, entity.getImg_normal());
        stmt.bindLong(4, entity.getImg_pressed());
        stmt.bindLong(5, entity.getOrderId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
        stmt.bindLong(7, entity.getIconType());
 
        byte[] app_icon = entity.getApp_icon();
        if (app_icon != null) {
            stmt.bindBlob(8, app_icon);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DesktopIconBean readEntity(Cursor cursor, int offset) {
        DesktopIconBean entity = new DesktopIconBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // mid
            cursor.getInt(offset + 2), // img_normal
            cursor.getInt(offset + 3), // img_pressed
            cursor.getInt(offset + 4), // orderId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.getInt(offset + 6), // iconType
            cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7) // app_icon
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DesktopIconBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMid(cursor.getInt(offset + 1));
        entity.setImg_normal(cursor.getInt(offset + 2));
        entity.setImg_pressed(cursor.getInt(offset + 3));
        entity.setOrderId(cursor.getInt(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIconType(cursor.getInt(offset + 6));
        entity.setApp_icon(cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DesktopIconBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DesktopIconBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DesktopIconBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
