package com.desktop.telephone.telephonedesktop.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.desktop.telephone.telephonedesktop.bean.SystemStatusBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYSTEM_STATUS_BEAN".
*/
public class SystemStatusBeanDao extends AbstractDao<SystemStatusBean, Long> {

    public static final String TABLENAME = "SYSTEM_STATUS_BEAN";

    /**
     * Properties of entity SystemStatusBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property BlackListModeType = new Property(1, int.class, "blackListModeType", false, "BLACK_LIST_MODE_TYPE");
    }


    public SystemStatusBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SystemStatusBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYSTEM_STATUS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"BLACK_LIST_MODE_TYPE\" INTEGER NOT NULL );"); // 1: blackListModeType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYSTEM_STATUS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SystemStatusBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getBlackListModeType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SystemStatusBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getBlackListModeType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public SystemStatusBean readEntity(Cursor cursor, int offset) {
        SystemStatusBean entity = new SystemStatusBean( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1) // blackListModeType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SystemStatusBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setBlackListModeType(cursor.getInt(offset + 1));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SystemStatusBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SystemStatusBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SystemStatusBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
