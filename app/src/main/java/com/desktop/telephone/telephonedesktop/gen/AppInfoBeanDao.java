package com.desktop.telephone.telephonedesktop.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.desktop.telephone.telephonedesktop.bean.AppInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_INFO_BEAN".
*/
public class AppInfoBeanDao extends AbstractDao<AppInfoBean, Long> {

    public static final String TABLENAME = "APP_INFO_BEAN";

    /**
     * Properties of entity AppInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SortId = new Property(1, int.class, "sortId", false, "SORT_ID");
        public final static Property AppName = new Property(2, String.class, "appName", false, "APP_NAME");
        public final static Property AppIcon = new Property(3, byte[].class, "appIcon", false, "APP_ICON");
        public final static Property PackageName = new Property(4, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property Uid = new Property(5, int.class, "uid", false, "UID");
        public final static Property UserApp = new Property(6, boolean.class, "userApp", false, "USER_APP");
        public final static Property InRom = new Property(7, boolean.class, "inRom", false, "IN_ROM");
        public final static Property IsShowDesktop = new Property(8, boolean.class, "isShowDesktop", false, "IS_SHOW_DESKTOP");
        public final static Property IconType = new Property(9, int.class, "iconType", false, "ICON_TYPE");
        public final static Property PhoneNum = new Property(10, String.class, "phoneNum", false, "PHONE_NUM");
    }


    public AppInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AppInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SORT_ID\" INTEGER NOT NULL ," + // 1: sortId
                "\"APP_NAME\" TEXT," + // 2: appName
                "\"APP_ICON\" BLOB," + // 3: appIcon
                "\"PACKAGE_NAME\" TEXT," + // 4: packageName
                "\"UID\" INTEGER NOT NULL ," + // 5: uid
                "\"USER_APP\" INTEGER NOT NULL ," + // 6: userApp
                "\"IN_ROM\" INTEGER NOT NULL ," + // 7: inRom
                "\"IS_SHOW_DESKTOP\" INTEGER NOT NULL ," + // 8: isShowDesktop
                "\"ICON_TYPE\" INTEGER NOT NULL ," + // 9: iconType
                "\"PHONE_NUM\" TEXT);"); // 10: phoneNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSortId());
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(3, appName);
        }
 
        byte[] appIcon = entity.getAppIcon();
        if (appIcon != null) {
            stmt.bindBlob(4, appIcon);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(5, packageName);
        }
        stmt.bindLong(6, entity.getUid());
        stmt.bindLong(7, entity.getUserApp() ? 1L: 0L);
        stmt.bindLong(8, entity.getInRom() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsShowDesktop() ? 1L: 0L);
        stmt.bindLong(10, entity.getIconType());
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(11, phoneNum);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppInfoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSortId());
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(3, appName);
        }
 
        byte[] appIcon = entity.getAppIcon();
        if (appIcon != null) {
            stmt.bindBlob(4, appIcon);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(5, packageName);
        }
        stmt.bindLong(6, entity.getUid());
        stmt.bindLong(7, entity.getUserApp() ? 1L: 0L);
        stmt.bindLong(8, entity.getInRom() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsShowDesktop() ? 1L: 0L);
        stmt.bindLong(10, entity.getIconType());
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(11, phoneNum);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AppInfoBean readEntity(Cursor cursor, int offset) {
        AppInfoBean entity = new AppInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // sortId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // appName
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3), // appIcon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // packageName
            cursor.getInt(offset + 5), // uid
            cursor.getShort(offset + 6) != 0, // userApp
            cursor.getShort(offset + 7) != 0, // inRom
            cursor.getShort(offset + 8) != 0, // isShowDesktop
            cursor.getInt(offset + 9), // iconType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // phoneNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppInfoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSortId(cursor.getInt(offset + 1));
        entity.setAppName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAppIcon(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
        entity.setPackageName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUid(cursor.getInt(offset + 5));
        entity.setUserApp(cursor.getShort(offset + 6) != 0);
        entity.setInRom(cursor.getShort(offset + 7) != 0);
        entity.setIsShowDesktop(cursor.getShort(offset + 8) != 0);
        entity.setIconType(cursor.getInt(offset + 9));
        entity.setPhoneNum(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AppInfoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AppInfoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AppInfoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
